AWSTemplateFormatVersion: '2010-09-09'
Description: "Infraestrutura AWS para servidor e clientes TCP com comunicação via sockets"

Parameters:
  KeyName:
    Description: Chave do Projeto de Nuvem
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ProjetoVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetServer:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  SubnetClient:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  SubnetAssocServer:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetServer
      RouteTableId: !Ref RouteTable

  SubnetAssocClient:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetClient
      RouteTableId: !Ref RouteTable

  SecurityGroupTCP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acesso TCP porta 5000
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  EC2Server:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-0c02fb55956c7d316
      SubnetId: !Ref SubnetServer
      SecurityGroupIds:
        - !Ref SecurityGroupTCP
      Tags:
        - Key: Name
          Value: TCPServer
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3
          cat > /home/ec2-user/server.py << 'EOF'
          import socket
          import threading
          import datetime

          HOST = '0.0.0.0'
          PORT = 5000
          LOG_FILE = '/home/ec2-user/log.txt'

          def log(message):
              timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
              full_message = "[{}] {}\n".format(timestamp, message)
              with open(LOG_FILE, 'a') as f:
                  f.write(full_message)
              print(full_message.strip())

          def handle_client(conn, addr):
              log("Nova conexão de {}".format(addr))
              try:
                  while True:
                      data = conn.recv(1024).decode()
                      if not data:
                          break
                      log("Recebido de {}: {}".format(addr, data))
                      conn.sendall("Dados recebidos com sucesso.".encode())
              except Exception as e:
                  log("Erro com {}: {}".format(addr, e))
              finally:
                  conn.close()
                  log("Conexão encerrada com {}".format(addr))

          def main():
              log("Servidor iniciando em {}:{}".format(HOST, PORT))
              server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
              server.bind((HOST, PORT))
              server.listen()

              try:
                  while True:
                      conn, addr = server.accept()
                      thread = threading.Thread(target=handle_client, args=(conn, addr))
                      thread.start()
                      log("Conexões ativas: {}".format(threading.active_count() - 1))
              except KeyboardInterrupt:
                  log("Servidor encerrado manualmente.")
              finally:
                  server.close()

          if __name__ == "__main__":
              main()
          EOF
          nohup python3 /home/ec2-user/server.py > /home/ec2-user/nohup.out 2>&1 &

  EC2Client1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-0c02fb55956c7d316
      SubnetId: !Ref SubnetClient
      SecurityGroupIds:
        - !Ref SecurityGroupTCP
      Tags:
        - Key: Name
          Value: TCPClient1
      UserData:
        Fn::Base64: !Sub 
        - |
          #!/bin/bash
          yum install -y python3
          SERVER_IP=${ServerIP}
          cat > /home/ec2-user/client.py << EOF
          import socket
          import time
          import random
          import datetime

          HOST = '${ServerIP}'
          PORT = 5000

          def generate_sensor_data():
              temperatura = round(random.uniform(20, 30), 2)
              return "Sensor1 - Temperatura: {}°C".format(temperatura)

          def log_local(message):
              timestamp = datetime.datetime.now().strftime('%H:%M:%S')
              print("[{}] [Cliente1] {}".format(timestamp, message))

          def main():
              try:
                  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                      s.connect((HOST, PORT))
                      log_local("Conectado ao servidor.")
                      while True:
                          data = generate_sensor_data()
                          s.sendall(data.encode())
                          resposta = s.recv(1024).decode()
                          log_local("Enviado: {}".format(data))
                          log_local("Resposta: {}".format(resposta))
                          time.sleep(2)
              except ConnectionRefusedError:
                  log_local("Erro ao conectar ao servidor.")
              except KeyboardInterrupt:
                  log_local("Encerrando cliente.")

          if __name__ == "__main__":
              main()
          nohup python3 /home/ec2-user/client.py > /home/ec2-user/nohup.out 2>&1 &
        - { ServerIP: !GetAtt EC2Server.PublicIp }

  EC2Client2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-0c02fb55956c7d316
      SubnetId: !Ref SubnetClient
      SecurityGroupIds:
        - !Ref SecurityGroupTCP
      Tags:
        - Key: Name
          Value: TCPClient2
      UserData:
        Fn::Base64: !Sub 
        - |
          #!/bin/bash
          yum install -y python3
          SERVER_IP=${ServerIP}
          cat > /home/ec2-user/client.py << EOF
          import socket
          import time
          import random
          import datetime

          HOST = '${ServerIP}'
          PORT = 5000

          def generate_sensor_data():
              umidade = round(random.uniform(40, 70), 2)
              return "Sensor2 - Umidade: {}%".format(umidade)

          def log_local(message):
              timestamp = datetime.datetime.now().strftime('%H:%M:%S')
              print("[{}] [Cliente2] {}".format(timestamp, message))

          def main():
              try:
                  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                      s.connect((HOST, PORT))
                      log_local("Conectado ao servidor.")
                      while True:
                          data = generate_sensor_data()
                          s.sendall(data.encode())
                          resposta = s.recv(1024).decode()
                          log_local("Enviado: {}".format(data))
                          log_local("Resposta: {}".format(resposta))
                          time.sleep(3)
              except ConnectionRefusedError:
                  log_local("Erro ao conectar ao servidor.")
              except KeyboardInterrupt:
                  log_local("Encerrando cliente.")

          if __name__ == "__main__":
              main()
          EOF
          nohup python3 /home/ec2-user/client.py > /home/ec2-user/nohup.out 2>&1 &
        - { ServerIP: !GetAtt EC2Server.PublicIp }


